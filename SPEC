SPEC

=====

Operators:

0 - fn noop()
| noop # increments stack pointer

1 - fn mov(dest: Addr, src: Addr)
| mov &0x0 &0x1 # moves whatever's at memory address 0x1 to memory address 0x1

2 - fn mov(dest: Addr, src: Int)
| mov &0x0 0x1 # moves an int with value 1 into memory address 0

3 - fn add(dest: Addr, src: Addr)
| add &0x0 &0x1 # adds src address to dest address

4 - fn sub(dest: Addr, src: Addr)
| sub &0x0 &0x1 # subs src address from dest address

5 - fn jmp(location: Addr)
| jmp 0x1 # moves stack pointer to address 0x1

6 - fn jnz(location: Addr, condition: Addr)
| jnz 0x1 &0x2 # moves stack pointer to address 0x1 if address 0x2 is not zero

7 - fn load(dest: Addr, src: Addr)
| load &0x0 &0x0 # ram[dest] = ram[ram[src]]

8 - fn store(dest: Addr, src: Addr)
| store &0x0 &0x0 # ram[ram[dest]] = ram[src]

9 - fn mul(dest: Addr, src: Addr)
| mul &0x0 &0x1 # multiplies dest address by src address

10 - fn div(dest: Addr, src: Addr)
| div &0x0 &0x1 # divides dest address by src address

11 - fn mod(dest: Addr, src: Addr)
| mod &0x0 &0x1 # dest %= src

12 - fn and(dest: Addr, src: Addr)
| and &0x0 &0x1 # dest &= src

13 - fn or(dest: Addr, src: Addr)
| or &0x0 &0x1 # dest |= src

14 - fn xor(dest: Addr, src: Addr)
| xor &0x0 &0x1 # dest ^= src

15 - fn shl(dest: Addr, src: Addr)
| shl &0x0 &0x1 # dest << src

16 - fn shr(dest: Addr, src: Addr)
| shr &0x0 &0x1 # dest >> src

17 - fn cmp(dest: Addr, src: Addr)
| cmp &0x0 &0x1 # dest = dest == src ? 1 : 0

18 - fn lt(dest: Addr, src: Addr)
| lt &0x0 &0x1 # dest = dest < src ? 1 : 0

19 - fn jmp(location: Addr)
| jmp &0x1 # moves stack pointer to address at address 0x1

20 - fn jnz(location: Addr, condition: Addr)
| jnz &0x1 &0x2 # moves stack pointer to address at address 0x1 if address 0x2 is not zero

_ => crash and burn exception

===

Registers:

ra = 0x10
r1-r8 = 0x11-0x18

===

Notes:

16384 u16's of memory
writing out of memory bounds results in crash and burn exception

bytes from [2048 + 0 + 80 * 0] - [2048 + 80 + 80 * 24] are rendered to the screen as chars using formula [2048 + x + 80 * y]

whitespace before and after instruction is ignored, but if any non-whitespace uncommented lines are parsed after instructions, it is ignored / UB / crash and burn exception
there should only be one instruction per line
unexpected or missing input from instruction results in crash and burn exception
initial instructions are loaded into ram from [64..64 + program length>]
text after ; is ignored and treated as comments
